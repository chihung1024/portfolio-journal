name: Fetch Top 500 US Large Cap Stocks

on:
  workflow_dispatch:

jobs:
  fetch-and-print-stocks:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run Python script to fetch stocks
        env:
          FMP_API_KEY: ${{ secrets.FMP_API_KEY }}
        # 告訴 GitHub Actions 使用 Python 來執行下面的程式碼
        shell: python 
        run: |
          import requests
          import os
          import sys

          # 從環境變數讀取 API 金鑰
          api_key = os.getenv("FMP_API_KEY")
          if not api_key:
              print("錯誤：找不到 FMP_API_KEY。請檢查 GitHub Secrets 是否已正確設定。", file=sys.stderr)
              sys.exit(1)

          url = "https://financialmodelingprep.com/api/v3/stock-screener"
          
          # --- 修改後的參數 ---
          # 1. 按照市值 (marketCap) 降序 (desc) 排序
          # 2. 限制結果為 500 筆
          # 3. 限定國家為美國 (US)
          # 步驟 1: 抓取一個更大的候選池 (例如總市值前 2000 名)
          # 注意：我們仍然按 marketCap (總市值) 排序，因為 API 不支援按流通市值排序
          params = {
              "sortBy": "marketCap",
              "order": "desc",
              "limit": 2000,  # 擴大抓取範圍，確保目標公司都在裡面
              "exchange": "NASDAQ,NYSE",
              "isActivelyTrading": "true",
              "apikey": api_key
          }

          try:
              response = requests.get(url, params=params)
              response.raise_for_status()
              companies = response.json()
              
              if not companies:
                  print("未找到任何符合條件的公司。", file=sys.stderr)
                  sys.exit(0)

              # 步驟 2: 在 Python 中為每家公司計算流通市值
              # 使用 .get(key, 0) 來避免缺少數據時出錯
              for company in companies:
                  price = company.get('price', 0)
                  float_shares = company.get('floatShares', 0)
                  # 檢查 price 和 float_shares 是否為 None 或 0
                  if price is not None and float_shares is not None:
                      company['floatMarketCap'] = price * float_shares
                  else:
                      company['floatMarketCap'] = 0

              # 步驟 3: 在 Python 中根據我們計算出的 'floatMarketCap' 進行降序排序
              sorted_companies = sorted(companies, key=lambda x: x['floatMarketCap'], reverse=True)

              # 步驟 4: 從排序後的新列表中選取前 1000 名
              top_1000_by_float = sorted_companies[:1000]
              
              # 從最終的列表中提取股票代碼並輸出
              tickers = [
                  company.get("symbol", "N/A").replace(".", "-")
                  for company in top_1000_by_float
              ]
              output_string = ",".join(tickers)
              print(output_string)

          except requests.exceptions.RequestException as e:
              print(f"API 請求失敗: {e}", file=sys.stderr)
              sys.exit(1)
